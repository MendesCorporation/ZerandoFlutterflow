// Automatic FlutterFlow imports
import '/backend/backend.dart';
import '/backend/schema/structs/index.dart';
import '/backend/supabase/supabase.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/custom_code/actions/index.dart'; // Imports other custom actions
import '/flutter_flow/custom_functions.dart'; // Imports custom functions
import 'package:flutter/material.dart';
// Begin custom action code
// DO NOT REMOVE OR MODIFY THE CODE ABOVE!

import 'package:flutter_tts/flutter_tts.dart';

// Set your action name, define your arguments and return parameter,
// and then add the boilerplate code using the button on the right!
Future<void> voz(String text) async {
  FlutterTts flutterTts = FlutterTts();
  flutterTts.setSpeechRate(2.0);
  flutterTts.setVolume(1.0);
  flutterTts.setPitch(1.3);
  flutterTts.setLanguage('pt');

  final int maxBlockSize = 4000;

  // Divide o texto em blocos de acordo com o tamanho máximo de caracteres
  List<String> blocks = [];
  int start = 0;
  while (start < text.length) {
    int end = start + maxBlockSize;
    if (end > text.length) {
      end = text.length;
    }
    String block = text.substring(start, end);
    blocks.add(block);
    start = end;
  }

  // Configura para aguardar a conclusão da fala antes de prosseguir
  if (blocks.length > 1) {
    await flutterTts.awaitSpeakCompletion(true);
  }
  // Executa cada bloco de texto com o método flutterTts.speak ()
  for (String block in blocks) {
    await flutterTts.speak(block);
  }
}
// Set your action name, define your arguments and return parameter,
// and then add the boilerplate code using the green button on the right!
